Veja as afirmações sobre a ArrayList:

a) Guarda referências.
b) É do pacote java.util.
c) Usa internamente um array.
d) Ao inicializar não é preciso definir o tamanho.
e) Se você adiciona uma referência na lista sem definir a posição o elemento sempre fica no fim da lista.
f) O único limite do ArrayList é a memória da JVM.


BENEFICIOS DO USO DOS GENERICS '<>':

Na criação da lista fica claro qual a intenção. Por exemplo, na declaração abaixo está bem claro que a lista guarda Strings:

ArrayList<String> nomes = new ArrayList<String>();

=============================================================================

Uma vez parametrizada a lista, não precisamos mais o cast, por exemplo:

Cliente ref = (Cliente) lista.get(0); // desnecessário com generics

=============================================================================

Antecipar problemas de casts no momento de compilação.

ArrayList<String> lista = new ArrayList<String>(); 
lista.add("Nico");
Conta c = lista.get(0); //nao compila


=============================================================================

Falamos que o ArrayList é um array dinâmico, ou seja, por baixo dos panos é usado um array, mas sem se preocupar com os detalhes e limitações.

Agora pense que você precisa criar uma lista representando todos os 26 estados do Brasil. Você gostaria de usar um ArrayList para "fugir" do array, mas sabe que o ArrayList cria um array automaticamente, do tamanho que a classe acha conveniente.

Será que não há uma forma de criar essa lista já definindo o tamanho do array? Claro que tem e é muito simples. O construtor da classe ArrayList é sobrecarregado e possui um que recebe a capacidade:

ArrayList lista = new ArrayList(26); //capacidade inicial
A lista continua dinâmica, mas o tamanho do array inicial é de 26!

Lista a partir de outra
Outra forma de inicializar uma lista é baseado na outra que é muito comum no dia a dia. Para tal a ArrayList possui mais um construtor que recebe a lista base:

ArrayList lista = new ArrayList(26); //capacidade inicial
lista.add("RJ");
lista.add("SP");
//outros estados
ArrayList nova = new ArrayList(lista); //criando baseado na primeira lista


==============================================================================

Nessa aula começamos a falar sobre lista e conhecemos a classe java.util.ArrayList. Aprendemos:

que a classe java.util.ArrayList encapsula o uso do array e oferece vários métodos de mais alto nível
que uma lista guarda referencias
como usar métodos size, get, remove
como usar o foreach para iterar a ArrayList
que os generics parametrizam classes
que no caso da ArrayList podemos definir o tipo dos elementos através de generics